// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  email     String   @unique
  username  String   @unique
  password  String

  session Session[]

  account Account[]

  Envelope Envelope[]

  Note Note[]

  Income Income[]

  Expense Expense[]
}

model Expense {
  id          String   @id @default(uuid()) @db.Uuid 
  location    String
  userId      String   @db.Uuid
  date        String   
  amount      Float
  envelopeTitle String
  comments    String?
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  envelopeId  String   @db.Uuid 
  envelope    Envelope @relation(fields: [envelopeId], references: [id], onDelete: Restrict)

  @@index([envelopeId]) 
  @@index([userId])   
}

model Income {
  id          String   @id @default(uuid()) @db.Uuid
  source      String
  amount      Float
  date        String   
  userId      String   @db.Uuid
  savings     Float?
  investments Float?
  remainder   Float?
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Envelope {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  fixed       Boolean
  budget      Float
  icon        String
  userId      String   @db.Uuid
  color       String
  comments    String?
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenses    Expense[]

  @@index([userId])
}

model Note {
  id          String   @id @default(uuid()) @db.Uuid
  month       Int
  content     String
  userId      String   @db.Uuid
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}